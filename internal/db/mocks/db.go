// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/justinpjose/cushon-assignment/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockDB) CreateTransaction(ctx context.Context, req models.CreateTransactionReq, totalAmount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, req, totalAmount)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockDBMockRecorder) CreateTransaction(ctx, req, totalAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockDB)(nil).CreateTransaction), ctx, req, totalAmount)
}

// GetAvailableFunds mocks base method.
func (m *MockDB) GetAvailableFunds(ctx context.Context, customerAccountNo int) ([]models.AvailableFund, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableFunds", ctx, customerAccountNo)
	ret0, _ := ret[0].([]models.AvailableFund)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableFunds indicates an expected call of GetAvailableFunds.
func (mr *MockDBMockRecorder) GetAvailableFunds(ctx, customerAccountNo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableFunds", reflect.TypeOf((*MockDB)(nil).GetAvailableFunds), ctx, customerAccountNo)
}

// GetByID mocks base method.
func (m *MockDB) GetByID(ctx context.Context, id int) (models.CustomerAccountsFundDB, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(models.CustomerAccountsFundDB)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByID indicates an expected call of GetByID.
func (mr *MockDBMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockDB)(nil).GetByID), ctx, id)
}

// GetTotalAmount mocks base method.
func (m *MockDB) GetTotalAmount(ctx context.Context, customerAccountFundID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalAmount", ctx, customerAccountFundID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalAmount indicates an expected call of GetTotalAmount.
func (mr *MockDBMockRecorder) GetTotalAmount(ctx, customerAccountFundID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalAmount", reflect.TypeOf((*MockDB)(nil).GetTotalAmount), ctx, customerAccountFundID)
}

// MockTransactionsDB is a mock of TransactionsDB interface.
type MockTransactionsDB struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionsDBMockRecorder
}

// MockTransactionsDBMockRecorder is the mock recorder for MockTransactionsDB.
type MockTransactionsDBMockRecorder struct {
	mock *MockTransactionsDB
}

// NewMockTransactionsDB creates a new mock instance.
func NewMockTransactionsDB(ctrl *gomock.Controller) *MockTransactionsDB {
	mock := &MockTransactionsDB{ctrl: ctrl}
	mock.recorder = &MockTransactionsDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionsDB) EXPECT() *MockTransactionsDBMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockTransactionsDB) CreateTransaction(ctx context.Context, req models.CreateTransactionReq, totalAmount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, req, totalAmount)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockTransactionsDBMockRecorder) CreateTransaction(ctx, req, totalAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockTransactionsDB)(nil).CreateTransaction), ctx, req, totalAmount)
}

// MockCustomerAccountsDB is a mock of CustomerAccountsDB interface.
type MockCustomerAccountsDB struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerAccountsDBMockRecorder
}

// MockCustomerAccountsDBMockRecorder is the mock recorder for MockCustomerAccountsDB.
type MockCustomerAccountsDBMockRecorder struct {
	mock *MockCustomerAccountsDB
}

// NewMockCustomerAccountsDB creates a new mock instance.
func NewMockCustomerAccountsDB(ctrl *gomock.Controller) *MockCustomerAccountsDB {
	mock := &MockCustomerAccountsDB{ctrl: ctrl}
	mock.recorder = &MockCustomerAccountsDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerAccountsDB) EXPECT() *MockCustomerAccountsDBMockRecorder {
	return m.recorder
}

// GetAvailableFunds mocks base method.
func (m *MockCustomerAccountsDB) GetAvailableFunds(ctx context.Context, customerAccountNo int) ([]models.AvailableFund, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableFunds", ctx, customerAccountNo)
	ret0, _ := ret[0].([]models.AvailableFund)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableFunds indicates an expected call of GetAvailableFunds.
func (mr *MockCustomerAccountsDBMockRecorder) GetAvailableFunds(ctx, customerAccountNo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableFunds", reflect.TypeOf((*MockCustomerAccountsDB)(nil).GetAvailableFunds), ctx, customerAccountNo)
}

// MockCustomerAccountsFundsDB is a mock of CustomerAccountsFundsDB interface.
type MockCustomerAccountsFundsDB struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerAccountsFundsDBMockRecorder
}

// MockCustomerAccountsFundsDBMockRecorder is the mock recorder for MockCustomerAccountsFundsDB.
type MockCustomerAccountsFundsDBMockRecorder struct {
	mock *MockCustomerAccountsFundsDB
}

// NewMockCustomerAccountsFundsDB creates a new mock instance.
func NewMockCustomerAccountsFundsDB(ctrl *gomock.Controller) *MockCustomerAccountsFundsDB {
	mock := &MockCustomerAccountsFundsDB{ctrl: ctrl}
	mock.recorder = &MockCustomerAccountsFundsDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerAccountsFundsDB) EXPECT() *MockCustomerAccountsFundsDBMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockCustomerAccountsFundsDB) GetByID(ctx context.Context, id int) (models.CustomerAccountsFundDB, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(models.CustomerAccountsFundDB)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCustomerAccountsFundsDBMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCustomerAccountsFundsDB)(nil).GetByID), ctx, id)
}

// GetTotalAmount mocks base method.
func (m *MockCustomerAccountsFundsDB) GetTotalAmount(ctx context.Context, customerAccountFundID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalAmount", ctx, customerAccountFundID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalAmount indicates an expected call of GetTotalAmount.
func (mr *MockCustomerAccountsFundsDBMockRecorder) GetTotalAmount(ctx, customerAccountFundID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalAmount", reflect.TypeOf((*MockCustomerAccountsFundsDB)(nil).GetTotalAmount), ctx, customerAccountFundID)
}
